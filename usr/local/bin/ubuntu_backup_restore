#!/bin/bash

CONFIG_FILE="/etc/backup-restore-tool/nas_config.conf"

# -------------------------
# Create config file if missing
# -------------------------
if [ ! -f "$CONFIG_FILE" ]; then
  echo "üîß NAS config not found. Let's set it up."

  read -p "Do you want to send backups to 1. a NAS or 2. a local folder/disk? [1/2]: " backup_destination
  if [ "$backup_destination" == "1" ]; then
    read -p "Enter NAS username: " nas_user
    read -p "Enter NAS IP address (e.g. 192.168.1.195): " nas_ip
    read -p "Enter NAS path (e.g. /volume1/NetBackup/backupdata_ubuntu_full): " nas_path

    echo "nas_user=\"$nas_user\"" > "$CONFIG_FILE"
    echo "nas_ip=\"$nas_ip\"" >> "$CONFIG_FILE"
    echo "nas_path=\"$nas_path\"" >> "$CONFIG_FILE"
  else
    read -p "Enter local path (e.g. /mnt/backup): " local_path

    echo "local_path=\"$local_path\"" > "$CONFIG_FILE"
  fi  

  echo "‚úÖ Config saved to $CONFIG_FILE"
fi

# -------------------------
# Load config variables
# -------------------------
source "$CONFIG_FILE"

# -------------------------
# Menu
# -------------------------
echo "=============================="
echo " UBUNTU BACKUP & RESTORE TOOL"
echo "=============================="
# if $local_path is different than "", it means we're using local backups
if [ "$local_path" != "" ]; then
  echo "Current Local Config:"
  echo "  Local Path: $local_path"
else
  echo "Current NAS Config:"
  echo "  NAS User : $nas_user"
  echo "  NAS IP   : $nas_ip"
  echo "  NAS Path : $nas_path"
fi
echo
echo "What do you want to do?"
echo "1) Backup (Save current system)"
echo "2) Restore (Recover system to /mnt)"
read -p "Enter choice [1 or 2]: " choice

if [ "$choice" == "1" ]; then
  echo "üìÇ Analyse des fichiers √† sauvegarder..."

  # Calcul du nombre de fichiers √† sauvegarder
  total_files=$(sudo find / \
    \( -path /dev -o -path /proc -o -path /sys -o -path /tmp -o -path /run -o -path /mnt -o -path /media -o -path /lost+found \) \
    -prune -o -type f -print | wc -l)

  # Calcul de la taille totale √† transf√©rer (en octets)
  total_size=$(sudo du -sb --exclude={"/dev","/proc","/sys","/tmp","/run","/mnt","/media","/lost+found"} / | awk '{print $1}')
  human_total=$(numfmt --to=iec-i --suffix=B "$total_size")

  echo "üì¶ Nombre total de fichiers : $total_files"
  echo "üìè Taille totale estim√©e   : $human_total"

  # Demande d'affichage d'infos avanc√©es
  read -p "Afficher les infos avanc√©es (nom de chaque fichier) ? [y/n] " adv_choice
  if [[ "$adv_choice" =~ ^[Yy]$ ]]; then
      advanced=true
      echo "‚Üí Mode avanc√© activ√© : chaque fichier sera affich√©."
  else
      advanced=false
      echo "‚Üí Mode avanc√© d√©sactiv√© : seule la barre de progression sera affich√©e."
  fi

  echo "‚Üí D√©marrage de la sauvegarde vers le NAS..."
  start_time=$(date +%s)
  current=0
  uploaded_size=0
  bar_width=50

  sudo rsync -aAX \
    --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} \
    --out-format="%n" \
    / "$nas_user@$nas_ip:$nas_path" | while IFS= read -r file; do
      current=$((current + 1))
      
      # Si le fichier existe toujours, on r√©cup√®re sa taille pour l'ajouter au total upload√©
      if [ -f "$file" ]; then
          size=$(stat -c%s "$file" 2>/dev/null || echo 0)
          uploaded_size=$((uploaded_size + size))
      fi

      # Calcul du pourcentage et construction de la barre
      percent=$((current * 100 / total_files))
      filled=$((percent * bar_width / 100))
      empty=$((bar_width - filled))
      bar=$(printf "%0.s‚ñà" $(seq 1 $filled))
      spaces=$(printf "%0.s " $(seq 1 $empty))

      # Calcul du temps √©coul√© et estimation du temps restant
      now=$(date +%s)
      elapsed=$((now - start_time))
      if [ "$current" -gt 0 ]; then
          estimated_total_time=$((elapsed * total_files / current))
          remaining=$((estimated_total_time - elapsed))
          printf -v elapsed_str "%02d:%02d" $((elapsed/60)) $((elapsed%60))
          printf -v remaining_str "%02d:%02d" $((remaining/60)) $((remaining%60))
      else
          elapsed_str="--:--"
          remaining_str="--:--"
      fi

      # Format des tailles upload√©e et totale
      human_uploaded=$(numfmt --to=iec-i --suffix=B "$uploaded_size")

      # Selon le mode avanc√©, on affiche soit avec le nom de fichier, soit pas
      if [ "$advanced" = true ]; then
          # Mode avanc√© : affichage du nom du fichier trait√© sur une nouvelle ligne
          echo "üìÑ Traitement : $file"
          echo "üîÑ [$bar$spaces] $percent%% ($current/$total_files) ‚è´ $human_uploaded / $human_total ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
      else
          # Mode standard : on efface la ligne pr√©c√©dente avant d'afficher la barre mise √† jour
          echo -ne "\033[2K\rüîÑ [$bar$spaces] $percent%% ($current/$total_files) ‚è´ $human_uploaded / $human_total ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
      fi
  done

  # Pour s'assurer que la derni√®re ligne est affich√©e proprement
  echo -e "\n‚úÖ Sauvegarde termin√©e avec succ√®s !"
fi


elif [ "$choice" == "2" ]; then
  echo "‚Üí Restoring system from NAS to /mnt..."
  echo "‚ö†Ô∏è  Make sure you've already mounted the destination partition at /mnt"
  read -p "Continue? [y/N]: " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    sudo rsync -aAXv "$nas_user@$nas_ip:$nas_path/" /mnt \
      --progress --stats

    echo "‚úÖ Restore completed!"
    echo "‚û°Ô∏è  You should now chroot into /mnt and reinstall GRUB:"
    echo "   sudo mount --bind /dev /mnt/dev"
    echo "   sudo mount --bind /proc /mnt/proc"
    echo "   sudo mount --bind /sys /mnt/sys"
    echo "   sudo chroot /mnt"
    echo "   grub-install /dev/sdX"
    echo "   update-grub"
    echo "   exit && sudo umount -R /mnt && reboot"
  else
    echo "‚ùå Restore cancelled."
  fi
else
  echo "‚ùå Invalid choice."
fi