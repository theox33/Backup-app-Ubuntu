#!/bin/bash

CONFIG_FILE="/etc/backup-restore-tool/nas_config.conf"

# -------------------------
# Create config file if missing
# -------------------------
if [ ! -f "$CONFIG_FILE" ]; then
  echo "üîß NAS config not found. Let's set it up."

  read -p "Do you want to send backups to 1. a NAS or 2. a local folder/disk? [1/2]: " backup_destination
  if [ "$backup_destination" == "1" ]; then
    read -p "Enter NAS username: " nas_user
    read -p "Enter NAS IP address (e.g. 192.168.1.195): " nas_ip
    read -p "Enter NAS path (e.g. /volume1/NetBackup/backupdata_ubuntu_full): " nas_path

    echo "nas_user=\"$nas_user\"" > "$CONFIG_FILE"
    echo "nas_ip=\"$nas_ip\"" >> "$CONFIG_FILE"
    echo "nas_path=\"$nas_path\"" >> "$CONFIG_FILE"
  else
    read -p "Enter local path (e.g. /mnt/backup): " local_path

    echo "local_path=\"$local_path\"" > "$CONFIG_FILE"
  fi  

  echo "‚úÖ Config saved to $CONFIG_FILE"
fi

# -------------------------
# Load config variables
# -------------------------
source "$CONFIG_FILE"

# -------------------------
# Menu
# -------------------------
echo "=============================="
echo " UBUNTU BACKUP & RESTORE TOOL"
echo "=============================="
# if $local_path is different than "", it means we're using local backups
if [ "$local_path" != "" ]; then
  echo "Current Local Config:"
  echo "  Local Path: $local_path"
else
  echo "Current NAS Config:"
  echo "  NAS User : $nas_user"
  echo "  NAS IP   : $nas_ip"
  echo "  NAS Path : $nas_path"
fi
echo
echo "What do you want to do?"
echo "1) Backup (Save current system)"
echo "2) Restore (Recover system to /mnt)"
read -p "Enter choice [1 or 2]: " choice

if [ "$choice" == "1" ]; then
  echo "üìÇ Analyse des fichiers √† sauvegarder..."

  EXCLUDES=(
    --exclude="/dev/*"
    --exclude="/proc/*"
    --exclude="/sys/*"
    --exclude="/tmp/*"
    --exclude="/run/*"
    --exclude="/mnt/*"
    --exclude="/media/*"
    --exclude="/lost+found"
    --exclude=".gradle/"
    --exclude="node_modules/"
  )

  rsync_output=$(sudo rsync -aAXn "${EXCLUDES[@]}" --out-format="%n" / "$nas_user@$nas_ip:$nas_path" --stats)

  file_list=$(echo "$rsync_output" | grep -vE "Number|Total")
  total_files=$(echo "$file_list" | wc -l)
  total_size=$(echo "$rsync_output" | grep "Total file size" | grep -oE '[0-9]+' | head -n1)
  total_files=${total_files:-0}
  total_size=${total_size:-0}
  human_total=$(numfmt --to=iec-i --suffix=B "$total_size")

  echo "üì¶ Fichiers √† traiter   : $total_files"
  echo "üìè Taille totale estim√©e : $human_total"

  read -p "Afficher le nom de chaque fichier ? [y/n] " adv_choice
  advanced=false
  [[ "$adv_choice" =~ ^[Yy]$ ]] && advanced=true

  echo "üîÑ Sauvegarde en cours..."

  current=0
  bar_width=50
  start_time=$(date +%s)

  sudo rsync -aAX "${EXCLUDES[@]}" --out-format="%n" / "$nas_user@$nas_ip:$nas_path" | while IFS= read -r file; do
    current=$((current + 1))

    percent=$((current * 100 / total_files))
    filled=$((percent * bar_width / 100))
    empty=$((bar_width - filled))
    bar=$(printf "%0.s‚ñà" $(seq 1 $filled))
    spaces=$(printf "%0.s " $(seq 1 $empty))

    now=$(date +%s)
    elapsed=$((now - start_time))
    if [ "$current" -gt 0 ]; then
      estimated_total=$((elapsed * total_files / current))
      remaining=$((estimated_total - elapsed))
      printf -v elapsed_str "%02d:%02d" $((elapsed/60)) $((elapsed%60))
      printf -v remaining_str "%02d:%02d" $((remaining/60)) $((remaining%60))
    else
      elapsed_str="--:--"
      remaining_str="--:--"
    fi

    if [ "$advanced" = true ]; then
      echo "üìÑ $file"
      echo "üîÑ [$bar$spaces] $percent%% ($current/$total_files) ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
    else
      echo -ne "\033[2K\rüîÑ [$bar$spaces] $percent%% ($current/$total_files) ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
    fi
  done

  echo -e "\n‚úÖ Sauvegarde termin√©e avec succ√®s !"
fi

elif [ "$choice" == "2" ]; then
  echo "‚Üí Restoring system from NAS to /mnt..."
  echo "‚ö†Ô∏è  Make sure you've already mounted the destination partition at /mnt"
  read -p "Continue? [y/N]: " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    sudo rsync -aAXv "$nas_user@$nas_ip:$nas_path/" /mnt \
      --progress --stats

    echo "‚úÖ Restore completed!"
    echo "‚û°Ô∏è  You should now chroot into /mnt and reinstall GRUB:"
    echo "   sudo mount --bind /dev /mnt/dev"
    echo "   sudo mount --bind /proc /mnt/proc"
    echo "   sudo mount --bind /sys /mnt/sys"
    echo "   sudo chroot /mnt"
    echo "   grub-install /dev/sdX"
    echo "   update-grub"
    echo "   exit && sudo umount -R /mnt && reboot"
  else
    echo "‚ùå Restore cancelled."
  fi
else
  echo "‚ùå Invalid choice."
fi