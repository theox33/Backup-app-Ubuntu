#!/bin/bash

CONFIG_FILE="/etc/backup-restore-tool/nas_config.conf"

# -------------------------
# Cr√©er le fichier de configuration s'il est manquant
# -------------------------
if [ ! -f "$CONFIG_FILE" ]; then
  echo "üîß Configuration NAS introuvable. Configurons-le."

  read -p "Voulez-vous envoyer les sauvegardes vers 1. un NAS ou 2. un dossier/disque local ? [1/2]: " backup_destination
  if [ "$backup_destination" == "1" ]; then
    read -p "Entrez le nom d'utilisateur NAS : " nas_user
    read -p "Entrez l'adresse IP du NAS (ex. 192.168.1.195) : " nas_ip
    read -p "Entrez le chemin du NAS (ex. /volume1/NetBackup/backupdata_ubuntu_full) : " nas_path

    echo "nas_user=\"$nas_user\"" > "$CONFIG_FILE"
    echo "nas_ip=\"$nas_ip\"" >> "$CONFIG_FILE"
    echo "nas_path=\"$nas_path\"" >> "$CONFIG_FILE"
  else
    read -p "Entrez le chemin local (ex. /mnt/backup) : " local_path

    echo "local_path=\"$local_path\"" > "$CONFIG_FILE"
  fi  

  echo "‚úÖ Configuration enregistr√©e dans $CONFIG_FILE"
fi

# -------------------------
# Charger les variables de configuration
# -------------------------
source "$CONFIG_FILE"

# -------------------------
# Menu
# -------------------------
echo "=============================="
echo " OUTIL DE SAUVEGARDE & RESTAURATION UBUNTU"
echo "=============================="
# Si $local_path est diff√©rent de "", cela signifie que nous utilisons des sauvegardes locales
if [ "$local_path" != "" ]; then
  echo "Configuration locale actuelle :"
  echo "  Chemin local : $local_path"
else
  echo "Configuration NAS actuelle :"
  echo "  Utilisateur NAS : $nas_user"
  echo "  IP NAS : $nas_ip"
  echo "  Chemin NAS : $nas_path"
fi
echo
echo "Que voulez-vous faire ?"
echo "1) Sauvegarder (Enregistrer le syst√®me actuel)"
echo "2) Restaurer (R√©cup√©rer le syst√®me vers /mnt)"
read -p "Entrez votre choix [1 ou 2] : " choice

if [ "$choice" == "1" ]; then
  echo "üìÇ Analyse des fichiers √† sauvegarder..."

  EXCLUDES=(
    --exclude="/dev/*"
    --exclude="/proc/*"
    --exclude="/sys/*"
    --exclude="/tmp/*"
    --exclude="/run/*"
    --exclude="/mnt/*"
    --exclude="/media/*"
    --exclude="/lost+found"
    --exclude=".gradle/"
    --exclude="node_modules/"
  )

  rsync_output=$(sudo rsync -aAXn "${EXCLUDES[@]}" --out-format="%n" / "$nas_user@$nas_ip:$nas_path" --stats)

  file_list=$(echo "$rsync_output" | grep -vE "Number|Total")
  total_files=$(echo "$file_list" | wc -l)
  total_size=$(echo "$rsync_output" | grep "Total file size" | grep -oE '[0-9]+' | head -n1)
  total_files=${total_files:-0}
  total_size=${total_size:-0}
  human_total=$(numfmt --to=iec-i --suffix=B "$total_size")

  echo "üì¶ Fichiers √† traiter      : $total_files"
  echo "üìè Taille totale estim√©e   : $human_total"

  read -p "Afficher le nom de chaque fichier ? [y/n] " adv_choice
  advanced=false
  [[ "$adv_choice" =~ ^[Yy]$ ]] && advanced=true

  echo "üîÑ Sauvegarde en cours..."

  current=0
  bar_width=50
  start_time=$(date +%s)

  sudo rsync -aAX "${EXCLUDES[@]}" --out-format="%n" / "$nas_user@$nas_ip:$nas_path" | while IFS= read -r file; do
    current=$((current + 1))

    percent=$((current * 100 / total_files))
    filled=$((percent * bar_width / 100))
    empty=$((bar_width - filled))
    bar=$(printf "%0.s‚ñà" $(seq 1 $filled))
    spaces=$(printf "%0.s " $(seq 1 $empty))

    now=$(date +%s)
    elapsed=$((now - start_time))
    if [ "$current" -gt 0 ]; then
      estimated_total=$((elapsed * total_files / current))
      remaining=$((estimated_total - elapsed))
      printf -v elapsed_str "%02d:%02d" $((elapsed/60)) $((elapsed%60))
      printf -v remaining_str "%02d:%02d" $((remaining/60)) $((remaining%60))
    else
      elapsed_str="--:--"
      remaining_str="--:--"
    fi

    if [ "$advanced" = true ]; then
      echo "üìÑ $file"
      echo "üîÑ [$bar$spaces] $percent% ($current/$total_files) ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
    else
      echo -ne "\033[2K\rüîÑ [$bar$spaces] $percent% ($current/$total_files) ‚è±Ô∏è $elapsed_str | ‚è≥ $remaining_str"
    fi
  done

  echo -e "\n‚úÖ Sauvegarde termin√©e avec succ√®s !"
fi

elif [ "$choice" == "2" ]; then
  echo "‚Üí Restauration du syst√®me depuis le NAS vers /mnt..."
  echo "‚ö†Ô∏è  Assurez-vous d'avoir mont√© la partition de destination sur /mnt"
  read -p "Continuer ? [y/N] : " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    sudo rsync -aAXv "$nas_user@$nas_ip:$nas_path/" /mnt \
      --progress --stats

    echo "‚úÖ Restauration termin√©e !"
    echo "‚û°Ô∏è  Vous devez maintenant chroot dans /mnt et r√©installer GRUB :"
    echo "   sudo mount --bind /dev /mnt/dev"
    echo "   sudo mount --bind /proc /mnt/proc"
    echo "   sudo mount --bind /sys /mnt/sys"
    echo "   sudo chroot /mnt"
    echo "   grub-install /dev/sdX"
    echo "   update-grub"
    echo "   exit && sudo umount -R /mnt && reboot"
  else
    echo "‚ùå Restauration annul√©e."
  fi
else
  echo "‚ùå Choix invalide."
fi